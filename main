import random

# Rolls two dice and returns each die number as well as roll total
def rollDice(player):
    print()
    print("PLAYER " + str(player + 1) + " TURN")
    # Will continue to ask player to press enter to roll
#    while True:
#        ready = input("Please PRESS ENTER to roll.")
#        if ready == "":
#            break
    die1 = random.randint(1,6)
    die2 = random.randint(1,6)
    sum = die1 + die2
    roll = [die1, die2, sum]
    print("You rolled " + str(die1) + " and " + str(die2) + " for a total of " + str(sum) + ".")
    return roll

# Swaps current player with first place
def swapWithFirst(spaces, player):
    max = player
    for i in range(len(spaces)):
        if spaces[i] > spaces[max]:
            max = i
    spaces[player], spaces[max] = spaces[max], spaces[player] 
    if max != player:
        print("Swap with PLAYER " + str(max + 1) + " in first place. ")
    else:
        print("You're already in first place!  Congrats, you stay there. ")
    return spaces

# Swaps current player with last place
def swapWithLast(spaces, player, initial):
    min = player
    start = []
    for i in range(len(spaces)):
        # Looks only at players who have already started
        if spaces[i] <= spaces[min] and initial[i] and i != player:
            if spaces[i] == 1:
                start.append(i + 1)
            min = i
    # Allows player to choose who to swap with if multiple at start.
    if len(start) > 1:
        print("There is more than one player at start!")
        print("Choose one of the following players to swap with.")
        for i in range(len(start)):
            print("PLAYER " + str(start[i]))
        # Repeatdedly asks for valid input
        while True:
            try:
                min = int(input("Who do you choose? (Input only the number): ")) - 1
            except ValueError:
                continue
            if min + 1 in start:
                break
    spaces[player], spaces[min] = spaces[min], spaces[player] 
    if min != player:
        print("Swap with PLAYER " + str(min + 1) + " in last place. ")
    else:
        print("You're already in last place!  Too bad, you stay there. ")
    return spaces

# Checks for SORRY! condition
def checkForSorry(spaces, player):
    for i in range(len(spaces)):
        if i != player:
            if spaces[i] == spaces[player]:
                spaces[i] = 1
                print("SORRY! PLAYER " + str(i + 1) + " return to start!")
                break
        else:
            continue
    return spaces

# Prints board showing players positions
def printBoard(spaces):
    print()
    for i in range(50):
        if i == 0:
            for j in range(len(spaces)):
                if spaces[j] == 1:
                    print("PLAYER " + str(j + 1) + " at start.")
            print("[S]", end="")
        elif i == 24:
            if i + 1 in spaces:
                print("[" + str(spaces.index(i + 1) + 1) + "]")
            else:
                print("[ ]")
        elif i == 49:
            if i + 1 in spaces:
                print("[" + str(spaces.index(i + 1) + 1) + "]")
            else:
                print("[F]")
        elif i + 1 in spaces:
            print("[" + str(spaces.index(i + 1) + 1) + "]", end="")
        else:
            print("[ ]", end="")
    return

# Checks for and applies special conditions of roll
def executeRoll(total, spaces, player, initial):
    noMove = spaces[player]
    if total == 4:
        # Move back one space (unless at start)
        if spaces[player] > 1:
            print("Move back one space!")
            spaces[player] -= 1
            spaces = checkForSorry(spaces, player)
        else:
            print("You can't move back because you're at start!  You stay there.")
    elif total == 7:
        spaces = swapWithFirst(spaces, player)
    elif total == 11:
        spaces = swapWithLast(spaces, player, initial)
    elif total == 12:
        # Return to start (unless at start)
        if spaces[player] > 1:
            print("Return to start!")
            spaces[player] = 1
        else:
            print("You're already at start!  You stay there.")
    else:
        print("Move forward " + str(total) + " spaces!")
        spaces[player] += total
        spaces = checkForSorry(spaces, player)
    # Checks for exact roll to win
    if spaces[player] > 50:
        spaces[player] = noMove
        print("Sorry, you need an exact roll to win!  You don't move.")
    printBoard(spaces)
    return spaces

# Checks for doubles and then returns boolean value
def rolledDouble(roll):
    if roll[0] == roll[1]:
        return True
    else:
        return False

# Keeps track of consecutive doubles and applies appropriate conditions
def trackDoubles(roll, spaces, player, doubles, initial):
    if rolledDouble(roll):
        doubles[i] += 1
        if doubles[i] == 1:
            print("You rolled doubles!  Roll again.")
            roll = rollDice(player)
            if rolledDouble(roll):                                
                print("Oh no!  Two doubles in a row.  Bad luck.  Return to start.")
                spaces[i] = 1
            else:
                spaces = executeRoll(roll[2], spaces, player, initial)
                doubles[i] = 0
        # This is turn 2 specific
        if doubles[i] == 2:
            doubles[i] = 0
            print("Oh no!  Two doubles in a row.  Bad luck.  Return to start.")
            spaces[i] = 1
    else:
        doubles[i] = 0
    return [spaces, doubles]

# Repeats games until player says no
newGame = True
while newGame:

    # Repeatedly asks for number of players until player enters valid number
    while True:
        numOfPlayers = input("How many players? (must be 2-4) ")
        if numOfPlayers not in ["2", "3", "4"]:
            print("You must choose a number between 2 and 4!")
            continue
        else:
            break

    # Creates array to keep track of each player's current space number
    currentSpaces = []
    initialDouble = []
    consecutiveDoubles = []
    for i in range(int(numOfPlayers)):
        # Play starts on space 1 (alternatively could start on space 0)
        currentSpaces.append(1)
        initialDouble.append(False)
        consecutiveDoubles.append(0)

    # Prints initial empty board (for aesthetics)
    printBoard(currentSpaces)

    # Loop for turns to continue until there is a winner
    winner = False
    while not winner:

        # One round of turns for each player
        for i in range(len(currentSpaces)):
            firstRoll = False
            currentRoll = rollDice(i)

            # Checks for initial double roll
            if not initialDouble[i]:
                # Player applies conditions of initial double roll to move (alternatively could roll again)
                if rolledDouble(currentRoll):
                    initialDouble[i] = True
                    firstRoll = True
                    consecutiveDoubles[i] += 1
                    print("Congrats on rolling your first double!  You get to move.")
                else:
                    print("Sorry, you did not roll a double!  Try again next time.")
                    printBoard(currentSpaces)
                    continue

            # Runs a regular turn if player has already rolled an initial double to start
            if initialDouble[i]:
                currentSpaces = executeRoll(currentRoll[2], currentSpaces, i, initialDouble)


                # Checks for win condition (player reaching space #50)
                if currentSpaces[i] == 50:
                    winner = True
                    print("PLAYER " + str(i + 1) + " wins!")

                    # Repeatedly asks for user to play again until they choose valid input
                    while True:
                        playAgain = input("Would you like to play again? [y/n] ")
                        if playAgain == "y":
                            print("You've chosen to play a new game!  Good choice.")
                            print()
                            break
                        elif playAgain == "n":
                            print("You've chosen to stop playing.  No fun.")
                            break
                        else:
                            print("You must choose y or n!")
                            continue

                    if playAgain == "y":
                        break
                    else:
                        newGame = False
                        print("I hope you enjoyed playing!")
                        break
                
                # Checks for doubles (if it wasn't already checked with initial double)
                if not firstRoll:
                    newSpacesDoubles = trackDoubles(currentRoll, currentSpaces, i, consecutiveDoubles, initialDouble)
                    currentSpaces, consecutiveDoubles = newSpacesDoubles[0], newSpacesDoubles[1]
